package model;

import java.util.ArrayList;
import java.util.List;

public class PokerStatus {

	public PokerStatus() {
	}

	public String verificar(String card1, String card2, String card3, String card4, String card5) {
		// miro el primer string, identifico su palo
		// comparo su palo si se repite 3 veces en el resto de strings
		// si se repiten retorno true pues hay poquer
		// sino, realizo lo mismo con los demas,
		// si el length del string es de 3, entonces es un 10 y una letra, en el index
		// numero 2, obtengo el palo
		// de lo contrario, es una carta en la cual su palo se encuntra en el index 1
		// (contamos desde el 0)

		List<String> cards = List.of(card1, card2, card3, card4, card5);

		for (String card : cards) {

			String value = getValue(card);

			String suit = getSuit(card);

			if (isPoquer(value, cards)) {
				return "Poquer";
			} else {
				if (isColor(suit, cards)) {
					return "Color";
				} else {
					if (isTrio(value, cards)) {
						return "Trio";
					}
				}
			}
		}
		return "Nada";
	}

	private boolean isPoquer(String value, List<String> cards) {

		List<String> valuesOfCards = valuesOf(cards);

		return (countCardsWith(value, valuesOfCards) == 4);

	}

	private List<String> valuesOf(List<String> cards) {

		List<String> values = new ArrayList<>();

		for (String card : cards) {
			values.add(getValue(card));
		}
		return values;
	}

	private int countCardsWith(String element, List<String> elements) {
		int count = 0;
		for (String e : elements) {
			if (e.equals(element)) {
				count++;
			}
		}
		return count;
	}

	private boolean isColor(String suit, List<String> cards) {

		List<String> suitOfCards = suitOf(cards);

		return (countCardsWith(suit, suitOfCards) == 5);
	}

	private List<String> suitOf(List<String> cards) {

		List<String> suit = new ArrayList<>();

		for (String card : cards) {
			suit.add(getSuit(card));
		}
		return suit;
	}

	private boolean isTrio(String value, List<String> cards) {

		List<String> valuesOfCards = valuesOf(cards);

		return (countCardsWith(value, valuesOfCards) == 3);

	}

	private String getValue(String card) {
		return card.substring(0, card.length() - 1); // Extrae todo menos el palo, "10D" = "10"
	}

	private String getSuit(String card) {
		return card.substring(card.length() - 1); // Extrae el palo, por ejemplo "10D" -> "D"
	}

	/*
	 * private int countCardsWithSuit(String suit, List<String> cards) { int count =
	 * 0; for (String card : cards) { if (getSuit(card).equals(suit)) { count++; } }
	 * return count; }
	 */

	/*
	 * private int countCardsWithValue(String value, List<String> cards) { int count
	 * = 0; for (String card : cards) { if (getValue(card).equals(value)) { count++;
	 * } } return count; }
	 */

}


/**TEST**/

package model;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class PokerStatusTest {
	private PokerStatus pokerSUT;

	@BeforeEach
	public void setUp() {
		pokerSUT = new PokerStatus();
	}
	
	@Test
	void WhenPokerStatusChecksPokerReturnsAPoquer() {
		//setUp
		//pokerSUT = new PokerStatus();
		//exercise
		String poker = pokerSUT.verificar("1D", "1P", "1C", "1T", "3D");
		
		//verifiy
		assertTrue("Poquer".equals(poker));
	}
	
	
	@Test
	void WhenPokerStatusChecksPokerWithQueens() {
		//setUp
		//pokerSUT = new PokerStatus();
		//exercise
		String poker = pokerSUT.verificar("QD", "QP", "QC", "QT", "3D");
		
		//verifiy
		assertTrue("Poquer".equals(poker));
	}
	
	@Test
	void WhenPokerStatusChecksPokerReturnsANada() {
		
		//exercise
		String poker = pokerSUT.verificar("1P","2C", "3P", "QD", "10D");
		
		//verifiy
		assertEquals(poker, "Nada");
	}
		
		@Test
		void WhenPokerStatusChecksColorReturnsAColor() {
			
		//exercise
		String poker = pokerSUT.verificar("1P","2P", "3P", "4P", "10P");
			
		//verifiy
		assertEquals(poker, "Color");
	}
	
		
		@Test
		void WhenPokerStatusChecksTrioReturnsATrio() {
			
		//exercise
		String poker = pokerSUT.verificar("2P","2D", "3C", "2P", "10P");
			
		//verifiy
		assertEquals(poker, "Trio");
	}
	
		
		@Test
		void WhenPokerStatusChecksTrioAndFailReturnsANada() {
			
		//exercise
		String poker = pokerSUT.verificar("1P","2D", "3C", "2P", "10P");
			
		//verifiy
		assertEquals(poker, "Nada");
	}
	
	
		@Test
		void WhenPokerStatusChecksHandAndFailReturnsANada() {
			
		//exercise
		String poker = pokerSUT.verificar("1D","2D", "3C", "2P", "10P");
			
		//verifiy
		assertEquals(poker, "Nada");
	}
		
		
}
